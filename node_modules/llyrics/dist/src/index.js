"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.find = exports.version = void 0;
const axios_1 = __importDefault(require("axios"));
const package_json_1 = require("../package.json");
Object.defineProperty(exports, "version", { enumerable: true, get: function () { return package_json_1.version; } });
const apiBaseUrl = 'https://lyrics.lewdhutao.my.eu.org';
const searchEngines = ['youtube', 'musixmatch', 'genius'];
/**
 * Finds the lyrics of a song.
 * @param {searchOptions} searchOptions Options to refine your search
 * @returns Promise<defaultResponse | musixMatchResponse>
 * @example
 * const { find } = require('llyrics');
 * const response = await find({
 *    song: 'Bohemian Rhapsody',
 *    engine: 'musixmatch'
 * });
 * console.log(response.artist);
 */
async function find(searchOptions) {
    if (searchOptions.engine === 'genius' && searchOptions.geniusApiKey === undefined)
        throw new TypeError('A genius API key is required.');
    const fetchParams = {
        title: searchOptions.song,
    };
    if (searchOptions.forceSearch === true) {
        const enginesToSearch = searchOptions.geniusApiKey ? searchEngines : ['youtube', 'musixmatch'];
        for (const currentEngine of enginesToSearch) {
            try {
                const iterationSearch = await find({
                    song: searchOptions.song,
                    geniusApiKey: searchOptions.geniusApiKey,
                    engine: currentEngine,
                });
                if (iterationSearch.status === 200 && iterationSearch.artist !== undefined) {
                    return iterationSearch;
                }
            }
            catch (error) {
                continue;
            }
        }
    }
    switch (searchOptions.engine) {
        case 'musixmatch': {
            if (searchOptions.artist)
                Object.assign(fetchParams, { artist: searchOptions.artist });
            break;
        }
        case 'genius': {
            Object.assign(fetchParams, { api_key: searchOptions.geniusApiKey });
            break;
        }
    }
    const fetchResponse = await axios_1.default.get(`${apiBaseUrl}/${searchOptions.engine !== undefined ? searchOptions.engine : 'youtube'}/lyrics`, { params: fetchParams });
    return {
        artist: fetchResponse.data.artist_name,
        title: fetchResponse.data.track_name,
        id: fetchResponse.data.track_id !== undefined ? fetchResponse.data.track_id : 0,
        engine: fetchResponse.data.search_engine,
        artworkURL: fetchResponse.data.artwork_url,
        lyrics: fetchResponse.data.lyrics,
        status: fetchResponse.status,
    };
}
exports.find = find;
//# sourceMappingURL=index.js.map